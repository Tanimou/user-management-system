name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint-and-test:
    name: Lint, Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: user_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/user_management_test" >> $GITHUB_ENV
          echo "DIRECT_URL=postgresql://test_user:test_password@localhost:5432/user_management_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-for-ci" >> $GITHUB_ENV
          echo "JWT_ACCESS_EXPIRES_IN=15m" >> $GITHUB_ENV
          echo "JWT_REFRESH_EXPIRES_IN=7d" >> $GITHUB_ENV
          echo "FRONTEND_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Generate Prisma client
        working-directory: ./api
        run: npm run db:generate

      - name: Run database migrations
        working-directory: ./api
        run: npm run db:push

      - name: Lint API code
        working-directory: ./api
        run: npm run lint || echo "Linting not configured yet"

      - name: Lint Frontend code  
        working-directory: ./web
        run: npm run lint || echo "Linting not configured yet"

      - name: Type check Frontend
        working-directory: ./web
        run: npm run type-check

      - name: Run API tests
        working-directory: ./api
        run: npm test

      - name: Run API tests with coverage
        working-directory: ./api
        run: npm run test:coverage

      - name: Build Frontend
        run: npm run build

      - name: Build API (TypeScript check)
        working-directory: ./api
        run: npm run build

  performance-check:
    name: Performance & Bundle Size Check
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: npm run build

      - name: Check bundle size
        run: |
          echo "Frontend bundle analysis:"
          ls -lh web/dist/assets/
          BUNDLE_SIZE=$(du -sh web/dist/assets/*.js | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          # Add warning if bundle is too large (>2MB)
          BUNDLE_BYTES=$(du -bc web/dist/assets/*.js | tail -n1 | cut -f1)
          if [ $BUNDLE_BYTES -gt 2097152 ]; then
            echo "::warning::Bundle size exceeds 2MB ($BUNDLE_SIZE)"
          fi