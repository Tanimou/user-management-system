name: Comprehensive Testing Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Backend Unit and Integration Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: user_management_test
        options: >-
          --health-cmd "pg_isready -U test_user -d user_management_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install API dependencies
        run: npm ci --workspace=api

      - name: Generate Prisma client
        run: npm run db:generate --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test

      - name: Run database migrations
        run: npm run db:migrate --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test

      - name: Run unit tests
        run: npm run test:unit --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test
          JWT_ACCESS_SECRET: test-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test
          JWT_ACCESS_SECRET: test-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          NODE_ENV: test

      - name: Generate coverage report
        run: npm run test:coverage --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test
          JWT_ACCESS_SECRET: test-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          NODE_ENV: test

      - name: Upload API coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./api/coverage
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Frontend Unit and Component Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install web dependencies
        run: npm ci --workspace=web

      - name: Run frontend unit tests
        run: npm run test:run --workspace=web

      - name: Generate frontend coverage
        run: npm run test:coverage --workspace=web

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./web/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: user_management_test
        options: >-
          --health-cmd "pg_isready -U test_user -d user_management_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install API dependencies
        run: npm ci --workspace=api

      - name: Install web dependencies
        run: npm ci --workspace=web

      - name: Generate Prisma client
        run: npm run db:generate --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test

      - name: Run database migrations
        run: npm run db:migrate --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test

      - name: Install Playwright browsers
        run: npm run install:playwright --workspace=web

      - name: Start application in background
        run: |
          npm run dev:frontend &
          npm run dev:api &
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test
          JWT_ACCESS_SECRET: test-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          NODE_ENV: test

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'

      - name: Run E2E tests
        run: npm run test:e2e --workspace=web
        env:
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: web/playwright-report/
          retention-days: 30

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-videos
          path: web/test-results/
          retention-days: 30

  # Linting and Formatting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting (API)
        run: npm run format:check --workspace=api

      - name: Check code formatting (Web)
        run: npm run format:check --workspace=web

      - name: Type checking (Web)
        run: npm run type-check --workspace=web

  # Performance and Security Tests (Optional)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: user_management_test
        options: >-
          --health-cmd "pg_isready -U test_user -d user_management_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test

      - name: Run database migrations
        run: npm run db:migrate --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test

      - name: Run performance tests
        run: npm run db:performance --workspace=api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/user_management_test
          JWT_ACCESS_SECRET: test-secret-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          NODE_ENV: test

  # Test Results Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, code-quality]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test summary
        run: |
          echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "### üéâ All tests passed! The comprehensive testing framework is working correctly." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Some tests failed. Please check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set job status
        if: needs.backend-tests.result != 'success' || needs.frontend-tests.result != 'success' || needs.e2e-tests.result != 'success' || needs.code-quality.result != 'success'
        run: exit 1