name: Deploy to Vercel

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./api
        run: npm run db:generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run tests before deployment
        working-directory: ./api
        run: npm test
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: test

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run database migrations
        if: success()
        run: |
          echo "Running database migrations..."
          # This would typically run migrations against production database
          # Requires setting up DATABASE_URL as a secret
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Health check
        if: success()
        run: |
          echo "Performing health check..."
          DEPLOY_URL="${{ steps.deploy.outputs.url }}"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Check if the deployment is responding
          curl -f --retry 3 --retry-delay 10 "${DEPLOY_URL}/api/health" || echo "Health check endpoint not available"

      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåç URL: ${{ steps.deploy.outputs.url }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs and resolve issues before retrying."